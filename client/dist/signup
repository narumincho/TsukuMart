<!doctype html>
<html lang="ja">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>つくマート | 新規登録</title>
    <script src="https://www.gstatic.com/firebasejs/6.3.0/firebase-app.js" defer></script>
    <script src="https://www.gstatic.com/firebasejs/6.3.0/firebase-auth.js" defer></script>
    <script src="https://tsukumart.com/signup.js" defer></script>
    <script type="module">
        ///@ts-check
        const fragment = new URLSearchParams(location.hash.substring(1));
        console.log("fragment", fragment)
        const app = window.Elm.SignUp.init({
            flags: {
                sendEmailToken: fragment.get("sendEmailToken"),
                name: fragment.get("name"),
                imageId: fragment.get("imageId")
            },
            node: document.getElementById("app")
        });
        app.ports.load.subscribe(imageInputElementId => {
            const userImageFileResizeAndConvertToDataUrl = (
                file
            ) =>
                new Promise((resolve, reject) => {
                    const image = new Image();
                    image.addEventListener("load", e => {
                        const canvas = document.createElement("canvas");
                        const sourceSize = Math.min(image.width, image.height);
                        const outputSize = Math.min(sourceSize, 400);
                        canvas.width = outputSize;
                        canvas.height = outputSize;
                        const context = canvas.getContext("2d");
                        context.drawImage(
                            image,
                            (image.width - sourceSize) / 2,
                            (image.height - sourceSize) / 2,
                            sourceSize,
                            sourceSize,
                            0,
                            0,
                            outputSize,
                            outputSize
                        );
                        resolve(canvas.toDataURL("image/png"));
                    });
                    image.src = window.URL.createObjectURL(file);
                });

            requestAnimationFrame(() => {
                const imageInputElement = document.getElementById(imageInputElementId);
                imageInputElement.addEventListener("input", async () => {
                    app.ports.imageInput.send(
                        await userImageFileResizeAndConvertToDataUrl(imageInputElement.files.item(0))
                    )
                })
            })
        })
        app.ports.setTextAreaValue.subscribe(({ id, text }) => {
            requestAnimationFrame(() => {
                document.getElementById(id).value = text;
            })
        })
    </script>
    <style>
        body {
            margin: 0;
        }

        #app {
            margin: 0;
            display: flex;
            justify-content: center;
        }
    </style>
</head>

<body>
    <div id="app"></div>
</body>

</html>